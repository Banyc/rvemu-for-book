  1 mod bus;                                                                                               20         panic!("Usage: rvemu-for-book <filename> <(option) image>");
  2 mod clint;                                                                                             21     }
  3 pub mod cpu;                                                                                           22     let kernel = read_file(&args[1])?;
  4 mod dram;                                                                                              23
  5 mod plic;                                                                                              24     let mut disk_image = Vec::new();
  6 pub mod trap;                                                                                          25     if args.len() == 3 {
  7 mod uart;                                                                                              26         disk_image = read_file(&args[2])?;
  8 mod virtio;                                                                                            27     }
~                                                                                                          28
~                                                                                                          29     let mut cpu = Cpu::new(kernel, disk_image);
~                                                                                                          30
~                                                                                                          31     loop {
~                                                                                                          32         // 1. Fetch.
~                                                                                                          33         let inst = match cpu.fetch() {
~                                                                                                          34             Ok(inst) => inst,
~                                                                                                          35             Err(_exception) => 0, // Place 0 if fetch() fails, will break out of the loop.
~                                                                                                          36         };
~                                                                                                          37
~                                                                                                          38         // 2. Add 4 to the program counter.
~                                                                                                          39         cpu.pc += 4;
~                                                                                                          40
~                                                                                                          41         // 3. Decode.
~                                                                                                          42         // 4. Execute.
~                                                                                                          43         match cpu.execute(inst) {
~                                                                                                          44             Ok(_) => {}
~                                                                                                          45             Err(exception) => {
~                                                                                                          46                 exception.take_trap(&mut cpu);
~                                                                                                          47                 // Break the loop if a fatal error occurs.
~                                                                                                          48                 if exception.is_fatal() {
~                                                                                                          49                     break;
~                                                                                                          50                 }
~                                                                                                          51             }
~                                                                                                          52         }
~                                                                                                          53
~                                                                                                          54         match cpu.check_pending_interrupt() {
~                                                                                                          55             Some(interrupt) => interrupt.take_trap(&mut cpu),
~                                                                                                          56             None => {}
~                                                                                                          57         }
~                                                                                                          58     }
~                                                                                                          59
~                                                                                                          60     cpu.dump_registers();
~                                                                                                          61     println!("---------------------------------------------------------------------------------------
~                                                                                                             --------------------");
~                                                                                                          62     cpu.dump_csrs();
~                                                                                                          63
~                                                                                                          64     Ok(())
~                                                                                                          65 }
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
~                                                                                                         ~
src/lib.rs                                                                              1,1            All src/main.rs                                                                            35,67          Bot
"src/main.rs" 65L, 1666C written
